<%- include('../partials/header', { user: user, title: title }) %>

<div class="container-fluid">
    <div class="row">
        <%- include('../partials/sidebar', { user: user }) %>
        
        <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4">
            <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
                <h1 class="h2">
                    <i class="fas fa-map-marked-alt me-2"></i>
                    Controller Map
                </h1>
                <div class="btn-toolbar mb-2 mb-md-0">
                    <div class="btn-group me-2">
                        <button type="button" class="btn btn-sm btn-outline-primary" onclick="refreshMap()">
                            <i class="fas fa-sync-alt me-1"></i>
                            Refresh
                        </button>
                        <button type="button" class="btn btn-sm btn-outline-secondary" onclick="toggleMapType()">
                            <i class="fas fa-layer-group me-1"></i>
                            Toggle View
                        </button>
                    </div>
                </div>
            </div>

            <!-- Map Container -->
            <div class="row mb-4">
                <div class="col-12">
                    <div class="card dashboard-card">
                        <div class="card-body p-0">
                            <div id="main-map" style="height: 600px; width: 100%;"></div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Controller Legend -->
            <div class="row mb-4">
                <div class="col-md-6">
                    <div class="card dashboard-card">
                        <div class="card-header">
                            <h5 class="mb-0">
                                <i class="fas fa-info-circle me-2"></i>
                                Map Legend
                            </h5>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-6">
                                    <h6>Controller Types</h6>
                                    <ul class="list-unstyled">
                                        <li><i class="fas fa-tachometer-alt text-primary me-2"></i> Speed Radar</li>
                                        <li><i class="fas fa-wind text-info me-2"></i> Beaufort Meter</li>
                                        <li><i class="fas fa-cloud-sun text-warning me-2"></i> Weather Station</li>
                                        <li><i class="fas fa-camera text-success me-2"></i> AI Camera</li>
                                    </ul>
                                </div>
                                <div class="col-md-6">
                                    <h6>Status Indicators</h6>
                                    <ul class="list-unstyled">
                                        <li><span class="status-indicator online me-2"></span> Online</li>
                                        <li><span class="status-indicator offline me-2"></span> Offline</li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="col-md-6">
                    <div class="card dashboard-card">
                        <div class="card-header">
                            <h5 class="mb-0">
                                <i class="fas fa-list me-2"></i>
                                Controllers on Map
                            </h5>
                        </div>
                        <div class="card-body">
                            <div id="controller-list">
                                <% if (controllers.length === 0) { %>
                                    <div class="text-center py-3">
                                        <i class="fas fa-map-marker-alt fa-2x text-muted mb-2"></i>
                                        <p class="text-muted">No controllers with location data</p>
                                    </div>
                                <% } else { %>
                                    <div class="list-group list-group-flush">
                                        <% controllers.forEach(controller => { %>
                                            <div class="list-group-item list-group-item-action" data-controller-id="<%= controller.id %>">
                                                <div class="d-flex w-100 justify-content-between">
                                                    <h6 class="mb-1">
                                                        <span class="status-indicator <%= controller.isOnline ? 'online' : 'offline' %> me-2"></span>
                                                        <%= controller.name || controller.serialNumber %>
                                                    </h6>
                                                    <small class="<%= controller.isOnline ? 'text-success' : 'text-muted' %>">
                                                        <%= controller.isOnline ? 'Online' : 'Offline' %>
                                                    </small>
                                                </div>
                                                <p class="mb-1">
                                                    <span class="badge bg-secondary me-2">
                                                        <%= controller.type.charAt(0).toUpperCase() + controller.type.slice(1) %>
                                                    </span>
                                                    <small class="text-muted">
                                                        <%= controller.latitude.toFixed(4) %>, <%= controller.longitude.toFixed(4) %>
                                                    </small>
                                                </p>
                                                <small class="text-muted">
                                                    <% if (controller.lastSeen) { %>
                                                        Last seen: <span data-timestamp="<%= controller.lastSeen %>"><%= new Date(controller.lastSeen).toLocaleString() %></span>
                                                    <% } else { %>
                                                        Never seen
                                                    <% } %>
                                                </small>
                                            </div>
                                        <% }) %>
                                    </div>
                                <% } %>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </main>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    initializeMap();
    setupMapEvents();
});

let map;
let markers = {};
let mapType = 'osm'; // osm or satellite

function initializeMap() {
    const controllers = <%- JSON.stringify(controllers) %>;
    
    // Initialize map
    map = L.map('main-map').setView([51.505, -0.09], 2);
    
    // Add tile layer
    updateMapTiles();
    
    if (controllers.length === 0) {
        // Show default view
        return;
    }
    
    // Add markers for each controller
    controllers.forEach(controller => {
        addControllerMarker(controller);
    });
    
    // Fit map to show all markers
    const group = new L.featureGroup(Object.values(markers));
    if (Object.keys(markers).length > 0) {
        map.fitBounds(group.getBounds().pad(0.1));
    }
}

function addControllerMarker(controller) {
    const icon = getControllerIcon(controller.type, controller.isOnline);
    
    const marker = L.marker([controller.latitude, controller.longitude], { icon: icon })
        .bindPopup(createControllerPopup(controller))
        .addTo(map);
    
    // Store marker reference
    markers[controller.id] = marker;
    
    // Add click handler
    marker.on('click', function() {
        highlightControllerInList(controller.id);
    });
}

function getControllerIcon(type, isOnline) {
    const icons = {
        speedradar: 'tachometer-alt',
        beaufortmeter: 'wind',
        weatherstation: 'cloud-sun',
        aicamera: 'camera'
    };
    
    const iconName = icons[type] || 'microchip';
    const color = isOnline ? '#28a745' : '#dc3545';
    
    return L.divIcon({
        html: `<i class="fas fa-${iconName}" style="color: ${color}; font-size: 20px;"></i>`,
        iconSize: [30, 30],
        iconAnchor: [15, 15],
        popupAnchor: [0, -15],
        className: 'custom-map-icon'
    });
}

function createControllerPopup(controller) {
    return `
        <div class="controller-popup">
            <h6>${controller.name || controller.serialNumber}</h6>
            <p class="mb-1">
                <span class="badge bg-secondary">${controller.type.charAt(0).toUpperCase() + controller.type.slice(1)}</span>
            </p>
            <p class="mb-1">
                Status: <span class="${controller.isOnline ? 'text-success' : 'text-danger'}">
                    ${controller.isOnline ? 'Online' : 'Offline'}
                </span>
            </p>
            ${controller.lastSeen ? `
                <p class="mb-2 small text-muted">
                    Last seen: ${new Date(controller.lastSeen).toLocaleString()}
                </p>
            ` : ''}
            <div class="btn-group btn-group-sm w-100">
                <a href="/dashboard/controller/${controller.id}" class="btn btn-primary btn-sm">
                    <i class="fas fa-eye"></i> View
                </a>
                <a href="/controllers/${controller.id}/edit" class="btn btn-outline-secondary btn-sm">
                    <i class="fas fa-edit"></i> Edit
                </a>
            </div>
        </div>
    `;
}

function highlightControllerInList(controllerId) {
    // Remove previous highlights
    document.querySelectorAll('.list-group-item').forEach(item => {
        item.classList.remove('active');
    });
    
    // Highlight selected controller
    const listItem = document.querySelector(`[data-controller-id="${controllerId}"]`);
    if (listItem) {
        listItem.classList.add('active');
        listItem.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
    }
}

function updateMapTiles() {
    // Remove existing tile layers
    map.eachLayer(function(layer) {
        if (layer instanceof L.TileLayer) {
            map.removeLayer(layer);
        }
    });
    
    // Add new tile layer based on map type
    if (mapType === 'osm') {
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '© OpenStreetMap contributors'
        }).addTo(map);
    } else {
        L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {
            attribution: '© Esri'
        }).addTo(map);
    }
}

function refreshMap() {
    // Reload controller data and update markers
    fetch('/api/controllers/map')
        .then(response => response.json())
        .then(data => {
            // Clear existing markers
            Object.values(markers).forEach(marker => {
                map.removeLayer(marker);
            });
            markers = {};
            
            // Add updated markers
            data.controllers.forEach(controller => {
                addControllerMarker(controller);
            });
            
            // Update controller list
            updateControllerList(data.controllers);
            
            LXCloud.showNotification('Map refreshed successfully', 'success');
        })
        .catch(error => {
            console.error('Failed to refresh map:', error);
            LXCloud.showNotification('Failed to refresh map', 'danger');
        });
}

function toggleMapType() {
    mapType = mapType === 'osm' ? 'satellite' : 'osm';
    updateMapTiles();
    
    const btn = document.querySelector('button[onclick="toggleMapType()"]');
    btn.innerHTML = `<i class="fas fa-layer-group me-1"></i> ${mapType === 'osm' ? 'Satellite' : 'Street'} View`;
}

function updateControllerList(controllers) {
    const listContainer = document.getElementById('controller-list');
    
    if (controllers.length === 0) {
        listContainer.innerHTML = `
            <div class="text-center py-3">
                <i class="fas fa-map-marker-alt fa-2x text-muted mb-2"></i>
                <p class="text-muted">No controllers with location data</p>
            </div>
        `;
        return;
    }
    
    listContainer.innerHTML = `
        <div class="list-group list-group-flush">
            ${controllers.map(controller => `
                <div class="list-group-item list-group-item-action" data-controller-id="${controller.id}">
                    <div class="d-flex w-100 justify-content-between">
                        <h6 class="mb-1">
                            <span class="status-indicator ${controller.isOnline ? 'online' : 'offline'} me-2"></span>
                            ${controller.name || controller.serialNumber}
                        </h6>
                        <small class="${controller.isOnline ? 'text-success' : 'text-muted'}">
                            ${controller.isOnline ? 'Online' : 'Offline'}
                        </small>
                    </div>
                    <p class="mb-1">
                        <span class="badge bg-secondary me-2">
                            ${controller.type.charAt(0).toUpperCase() + controller.type.slice(1)}
                        </span>
                        <small class="text-muted">
                            ${controller.latitude.toFixed(4)}, ${controller.longitude.toFixed(4)}
                        </small>
                    </p>
                    <small class="text-muted">
                        ${controller.lastSeen ? `
                            Last seen: <span data-timestamp="${controller.lastSeen}">${new Date(controller.lastSeen).toLocaleString()}</span>
                        ` : 'Never seen'}
                    </small>
                </div>
            `).join('')}
        </div>
    `;
}

function setupMapEvents() {
    // Add list item click handlers
    document.addEventListener('click', function(e) {
        const listItem = e.target.closest('[data-controller-id]');
        if (listItem) {
            const controllerId = parseInt(listItem.getAttribute('data-controller-id'));
            const marker = markers[controllerId];
            if (marker) {
                map.setView(marker.getLatLng(), Math.max(map.getZoom(), 12));
                marker.openPopup();
                highlightControllerInList(controllerId);
            }
        }
    });
    
    // Real-time updates
    if (typeof io !== 'undefined') {
        const socket = io();
        socket.emit('join-user-room', <%= user.id %>);
        
        socket.on('controller-updated', function(controller) {
            // Update marker if it exists and has location
            if (markers[controller.id] && controller.latitude && controller.longitude) {
                // Update icon
                const newIcon = getControllerIcon(controller.type, controller.isOnline);
                markers[controller.id].setIcon(newIcon);
                
                // Update popup
                markers[controller.id].setPopupContent(createControllerPopup(controller));
                
                // Update list item
                const listItem = document.querySelector(`[data-controller-id="${controller.id}"]`);
                if (listItem) {
                    const statusIndicator = listItem.querySelector('.status-indicator');
                    const statusText = listItem.querySelector('.d-flex small');
                    
                    if (statusIndicator) {
                        statusIndicator.className = `status-indicator ${controller.isOnline ? 'online' : 'offline'} me-2`;
                    }
                    
                    if (statusText) {
                        statusText.textContent = controller.isOnline ? 'Online' : 'Offline';
                        statusText.className = controller.isOnline ? 'text-success' : 'text-muted';
                    }
                }
            }
        });
    }
}

// CSS for custom map icons
const style = document.createElement('style');
style.textContent = `
    .custom-map-icon {
        background: rgba(255, 255, 255, 0.9);
        border: 2px solid #333;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        box-shadow: 0 2px 6px rgba(0,0,0,0.3);
    }
    
    .controller-popup {
        min-width: 200px;
    }
    
    .controller-popup .btn-group {
        margin-top: 8px;
    }
`;
document.head.appendChild(style);
</script>

<%- include('../partials/footer') %>