<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link href="/css/style.css" rel="stylesheet">
    <style>
        body {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        .login-container {
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }
        
        .login-card {
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.15);
            overflow: hidden;
            max-width: 400px;
            width: 100%;
            animation: fadeInUp 0.6s ease-out;
        }
        
        @keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        .login-header {
            background: linear-gradient(135deg, #007bff, #0056b3);
            color: white;
            padding: 30px 20px;
            text-align: center;
        }
        
        .login-header h3 {
            margin: 0;
            font-weight: 600;
            font-size: 1.8rem;
        }
        
        .login-header .cloud-icon {
            font-size: 3rem;
            margin-bottom: 10px;
            opacity: 0.9;
        }
        
        .login-body {
            padding: 40px 30px;
        }
        
        .form-floating {
            margin-bottom: 20px;
        }
        
        .form-floating > .form-control {
            border: 2px solid #e9ecef;
            border-radius: 12px;
            padding: 12px 15px;
            height: 58px;
        }
        
        .form-floating > .form-control:focus {
            border-color: #007bff;
            box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
        }
        
        .form-floating > label {
            padding: 16px 15px;
            color: #6c757d;
        }
        
        .btn-login {
            background: linear-gradient(135deg, #007bff, #0056b3);
            border: none;
            border-radius: 12px;
            padding: 15px;
            font-weight: 600;
            font-size: 1.1rem;
            transition: all 0.3s ease;
            width: 100%;
            color: white;
        }
        
        .btn-login:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0, 123, 255, 0.3);
            color: white;
        }
        
        .btn-register {
            color: #007bff;
            text-decoration: none;
            font-weight: 500;
            transition: all 0.3s ease;
        }
        
        .btn-register:hover {
            color: #0056b3;
            text-decoration: underline;
        }
        
        .alert {
            border-radius: 12px;
            border: none;
            margin-bottom: 25px;
        }
        
        .alert-danger {
            background: linear-gradient(135deg, #dc3545, #c82333);
            color: white;
        }
        
        .divider {
            text-align: center;
            margin: 30px 0;
            position: relative;
        }
        
        .divider::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 0;
            right: 0;
            height: 1px;
            background: #e9ecef;
        }
        
        .divider span {
            background: white;
            padding: 0 20px;
            color: #6c757d;
            font-size: 0.9rem;
        }
        
        .footer-text {
            text-align: center;
            color: #6c757d;
            font-size: 0.9rem;
        }
    </style>
</head>
<body>
    <div class="login-container">
        <div class="login-card">
            <div class="login-header">
                <div class="cloud-icon">
                    <i class="fas fa-cloud"></i>
                </div>
                <h3>LXCloud Login</h3>
                <p class="mb-0 mt-2" style="opacity: 0.9;">Welcome back to your dashboard</p>
            </div>
            <div class="login-body">
                <% if (error) { %>
                    <div class="alert alert-danger" role="alert">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        <%= error %>
                        <% if (error.includes('connection refused') || error.includes('database')) { %>
                            <div class="mt-2">
                                <small>
                                    <i class="fas fa-info-circle me-1"></i>
                                    Server is running in fallback mode. If this persists, please check server logs.
                                </small>
                            </div>
                        <% } %>
                    </div>
                <% } %>
                
                <!-- Connection status indicator -->
                <div id="connection-status" class="d-none">
                    <div class="alert alert-warning" role="alert">
                        <i class="fas fa-wifi me-2"></i>
                        <span id="connection-message">Checking connection...</span>
                    </div>
                </div>

                <form method="POST" action="/auth/login" id="loginForm">
                    <div class="form-floating">
                        <input type="email" class="form-control" id="email" name="email" placeholder="name@example.com" required 
                               value="<%= typeof email !== 'undefined' ? email : '' %>">
                        <label for="email">
                            <i class="fas fa-envelope me-2"></i>Email Address
                        </label>
                    </div>

                    <div class="form-floating">
                        <input type="password" class="form-control" id="password" name="password" placeholder="Password" required>
                        <label for="password">
                            <i class="fas fa-lock me-2"></i>Password
                        </label>
                    </div>

                    <% if (typeof requireTwoFA !== 'undefined' && requireTwoFA) { %>
                        <div class="form-floating">
                            <input type="text" class="form-control" id="twoFactorToken" name="twoFactorToken" 
                                   placeholder="000000" maxlength="6" required>
                            <label for="twoFactorToken">
                                <i class="fas fa-shield-alt me-2"></i>Two-Factor Code
                            </label>
                        </div>
                    <% } %>

                    <!-- Remember Me and Forgot Password -->
                    <div class="row mb-3">
                        <div class="col-6">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="rememberMe" name="rememberMe">
                                <label class="form-check-label" for="rememberMe">
                                    Remember me
                                </label>
                            </div>
                        </div>
                        <div class="col-6 text-end">
                            <a href="#" class="btn-register small" id="forgotPasswordLink">
                                Forgot password?
                            </a>
                        </div>
                    </div>

                    <button type="submit" class="btn btn-login" id="loginButton">
                        <span class="button-text">
                            <i class="fas fa-sign-in-alt me-2"></i>
                            Sign In
                        </span>
                        <span class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true"></span>
                    </button>
                </form>

                <div class="divider">
                    <span>New to LXCloud?</span>
                </div>
                
                <div class="footer-text">
                    <p class="mb-0">Don't have an account?</p>
                    <a href="/auth/register" class="btn-register">
                        <i class="fas fa-user-plus me-1"></i>
                        Create your account
                    </a>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
    <script>
        // Enhanced login form handling with better error feedback
        document.addEventListener('DOMContentLoaded', function() {
            const loginForm = document.getElementById('loginForm');
            const loginButton = document.getElementById('loginButton');
            const connectionStatus = document.getElementById('connection-status');
            const forgotPasswordLink = document.getElementById('forgotPasswordLink');
            const emailInput = document.getElementById('email');
            const passwordInput = document.getElementById('password');
            
            // Check if we can reach the server
            checkServerConnection();
            
            // Enhanced form validation
            function validateForm() {
                const email = emailInput.value.trim();
                const password = passwordInput.value;
                
                if (!email || !password) {
                    showFormError('Please fill in all required fields');
                    return false;
                }
                
                if (!isValidEmail(email)) {
                    showFormError('Please enter a valid email address');
                    emailInput.focus();
                    return false;
                }
                
                return true;
            }
            
            function isValidEmail(email) {
                const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                return emailRegex.test(email);
            }
            
            function showFormError(message) {
                // Create or update error alert
                let errorAlert = document.querySelector('.form-error-alert');
                if (!errorAlert) {
                    errorAlert = document.createElement('div');
                    errorAlert.className = 'alert alert-danger form-error-alert';
                    errorAlert.innerHTML = '<i class="fas fa-exclamation-triangle me-2"></i><span class="error-text"></span>';
                    loginForm.insertBefore(errorAlert, loginForm.firstChild);
                }
                
                errorAlert.querySelector('.error-text').textContent = message;
                errorAlert.style.display = 'block';
                
                // Auto-hide after 5 seconds
                setTimeout(() => {
                    if (errorAlert) {
                        errorAlert.style.display = 'none';
                    }
                }, 5000);
            }
            
            // Handle form submission
            loginForm.addEventListener('submit', function(e) {
                if (!validateForm()) {
                    e.preventDefault();
                    return;
                }
                
                showLoading(true);
                
                // Let the form submit normally, but provide visual feedback
                setTimeout(() => {
                    if (loginButton) {
                        showLoading(false);
                    }
                }, 10000); // Reset after 10 seconds if no response
            });
            
            // Real-time email validation
            emailInput.addEventListener('blur', function() {
                const email = this.value.trim();
                if (email && !isValidEmail(email)) {
                    this.classList.add('is-invalid');
                } else {
                    this.classList.remove('is-invalid');
                }
            });
            
            // Clear validation on input
            emailInput.addEventListener('input', function() {
                this.classList.remove('is-invalid');
                hideFormError();
            });
            
            passwordInput.addEventListener('input', function() {
                hideFormError();
            });
            
            function hideFormError() {
                const errorAlert = document.querySelector('.form-error-alert');
                if (errorAlert) {
                    errorAlert.style.display = 'none';
                }
            }
            
            // Handle forgot password
            if (forgotPasswordLink) {
                forgotPasswordLink.addEventListener('click', function(e) {
                    e.preventDefault();
                    showForgotPasswordModal();
                });
            }
            
            function showForgotPasswordModal() {
                // For now, show an alert - in production this would open a modal
                alert('Password reset functionality will be available soon. Please contact your administrator for assistance.');
            }
            
            function showLoading(show) {
                if (!loginButton) return;
                
                const spinner = loginButton.querySelector('.spinner-border');
                const buttonText = loginButton.querySelector('.button-text');
                
                if (show) {
                    spinner.classList.remove('d-none');
                    buttonText.style.opacity = '0.7';
                    loginButton.disabled = true;
                } else {
                    spinner.classList.add('d-none');
                    buttonText.style.opacity = '1';
                    loginButton.disabled = false;
                }
            }
            
            function checkServerConnection() {
                fetch('/api/health', {
                    method: 'GET',
                    cache: 'no-cache'
                })
                .then(response => {
                    if (response.ok) {
                        return response.json();
                    } else {
                        throw new Error('Server responding but may have issues');
                    }
                })
                .then(data => {
                    hideConnectionWarning();
                    if (data.mockMode) {
                        showConnectionWarning('Running in development mode', 'info');
                    }
                })
                .catch(error => {
                    showConnectionWarning('Unable to connect to server', 'warning');
                    console.warn('Connection check failed:', error);
                });
            }
            
            function showConnectionWarning(message, type = 'warning') {
                if (connectionStatus) {
                    connectionStatus.className = `alert alert-${type}`;
                    document.getElementById('connection-message').textContent = message;
                    connectionStatus.classList.remove('d-none');
                }
            }
            
            function hideConnectionWarning() {
                if (connectionStatus) {
                    connectionStatus.classList.add('d-none');
                }
            }
            
            // Keyboard shortcuts
            document.addEventListener('keydown', function(e) {
                // Submit form on Ctrl+Enter
                if (e.ctrlKey && e.key === 'Enter') {
                    loginForm.requestSubmit();
                }
            });
            
            // Auto-focus email field
            if (emailInput && !emailInput.value) {
                emailInput.focus();
            }
        });
    </script>
</body>
</html>